diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4b98dd5..a6f6056 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -2,14 +2,62 @@ cmake_minimum_required(VERSION 3.12)
 project(p2r_kokkos CXX) # C++ needed to build my project
 #find_package(Kokkos REQUIRED) # fail if Kokkos not found
 
-add_subdirectory(kokkos)
+if (CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND DEFINED CLANG_STDPAR)
+    find_package(TBB REQUIRED)
 
-# build my executable from the specified source code
-#add_executable(p2r_kokkos "./src/propagate-tor-test_kokkos.cpp")
-add_executable(p2r_kokkos "./src/propagate-tor-test_kokkos_local.cpp")
+    add_executable(
+        clang_stdpar_cpu
+            ${CMAKE_CURRENT_SOURCE_DIR}/src/propagate-tor-test_pstl.cpp)
+    target_compile_options(
+        clang_stdpar_cpu PRIVATE -march=native -fopenmp-simd -ffast-math)
+    target_link_libraries(clang_stdpar_cpu PRIVATE TBB::tbb m)
 
-set(CMAKE_BUILD_TYPE Debug)
+    add_executable(
+        clang_stdpar_gpu
+            ${CMAKE_CURRENT_SOURCE_DIR}/src/propagate-tor-test_pstl.cpp)
+    target_compile_options(
+        clang_stdpar_gpu PRIVATE
+            --hipstdpar
+            --hipstdpar-path=${STDPAR_PATH}
+            --offload-arch=${STDPAR_TARGET}
+            -ffast-math)
+        if (NOT STDPAR_TARGET MATCHES "^gfx9")
+            target_compile_options(
+                clang_stdpar_gpu PRIVATE --hipstdpar-interpose-alloc)
+        endif ()
+    target_link_libraries(clang_stdpar_gpu PRIVATE m)
+    target_link_options(clang_stdpar_gpu PRIVATE -hipstdpar)
 
-# declare dependency on Kokkos, build p2r together with Kokkos, inheriting all the kokkos flags
-#target_link_libraries(p2r_kokkos PRIVATE Kokkos::kokkos)    ## standalone build
-target_link_libraries(p2r_kokkos Kokkos::kokkos)             ## JLSE build
+    if (DEFINED NTRKS)
+        target_compile_definitions(clang_stdpar_cpu PRIVATE ntrks=${NTRKS})
+        target_compile_definitions(clang_stdpar_gpu PRIVATE ntrks=${NTRKS})
+    endif ()
+    if (DEFINED BSIZE)
+        target_compile_definitions(clang_stdpar_cpu PRIVATE bsize=${BSIZE})
+        target_compile_definitions(clang_stdpar_gpu PRIVATE bsize=${BSIZE})
+    endif ()
+    if (DEFINED NEVTS)
+        target_compile_definitions(clang_stdpar_cpu PRIVATE nevts=${NEVTS})
+        target_compile_definitions(clang_stdpar_gpu PRIVATE nevts=${NEVTS})
+    endif ()
+    if (DEFINED NITER)
+        target_compile_definitions(clang_stdpar_cpu PRIVATE NITER=${NITER})
+        target_compile_definitions(clang_stdpar_gpu PRIVATE NITER=${NITER})
+    endif ()
+    if (DEFINED NLAYER)
+        target_compile_definitions(clang_stdpar_cpu PRIVATE nlayer=${NLAYER})
+        target_compile_definitions(clang_stdpar_gpu PRIVATE nlayer=${NLAYER})
+    endif ()
+else ()
+    add_subdirectory(kokkos)
+
+    # build my executable from the specified source code
+    #add_executable(p2r_kokkos "./src/propagate-tor-test_kokkos.cpp")
+    add_executable(p2r_kokkos "./src/propagate-tor-test_kokkos_local.cpp")
+
+    set(CMAKE_BUILD_TYPE Debug)
+
+    # declare dependency on Kokkos, build p2r together with Kokkos, inheriting all the kokkos flags
+    #target_link_libraries(p2r_kokkos PRIVATE Kokkos::kokkos)    ## standalone build
+    target_link_libraries(p2r_kokkos Kokkos::kokkos)             ## JLSE build
+endif ()
diff --git a/build.py b/build.py
index 82c5b09..ffa738a 100755
--- a/build.py
+++ b/build.py
@@ -35,7 +35,7 @@ technologies = {
         "cpu":['nvc++']
      },
     "pstl":{
-        "cpu":['gcc'], # add other compilers
+        "cpu":['gcc','clang','clang_gpu'], # add other compilers
         'cuda': ['nvc++','nvc++_x86']
     },
     "hip":{
@@ -109,6 +109,13 @@ def compilationCommand(compiler, technology, backend, target, source, scanPoint,
     if compiler == "hipcc":
         cmd.extend(["hipcc","-Iinclude","-std=c++17"])
 
+    if compiler == "clang":
+        cmd.extend(["clang++", "-Wall", "-Isrc", "-O3", "-fopenmp-simd", "-march=native", "-std=c++17",'-lm',"-ltbb"])
+    if compiler == "clang_gpu":
+        cmd.extend([os.path.expandvars("$STDPAR_CXX"), "-Wall", "-Isrc", "-O3", "-march=native", "-std=c++17",'-lm',"-ltbb", "--hipstdpar", os.path.expandvars("--hipstdpar-path=$STDPAR_PATH"), os.path.expandvars("--offload-arch=$STDPAR_TARGET")])
+        if not os.path.expandvars("$STDPAR_TARGET").startswith("gfx9"):
+            cmd.append("--hipstdpar-interpose-alloc")
+
     cmd.extend(["-o", target, source])
 
     if technology == "tbb" :
diff --git a/src/propagate-tor-test_pstl.cpp b/src/propagate-tor-test_pstl.cpp
index 09c6697..ab18b28 100644
--- a/src/propagate-tor-test_pstl.cpp
+++ b/src/propagate-tor-test_pstl.cpp
@@ -21,7 +21,7 @@ g++ -O3 -I. -fopenmp -mavx512f -std=c++17 src/propagate-tor-test_pstl.cpp -lm -l
 #include <random>
 
 
-#if defined(__NVCOMPILER_CUDA__)
+#if defined(__NVCOMPILER_CUDA__) || defined(__STDPAR__)
 constexpr bool use_cuda = true;
 #else
 constexpr bool use_cuda = false;
@@ -49,7 +49,7 @@ constexpr bool use_cuda = false;
 #define nlayer 20
 #endif
 
-#if defined(__NVCOMPILER_CUDA__)
+#if defined(__NVCOMPILER_CUDA__) || defined(__STDPAR__)
 #ifdef include_data
 constexpr bool include_data_transfer = true;
 #else
