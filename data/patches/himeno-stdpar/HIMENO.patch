diff --git a/stdpar/himenoBMTxps.cpp b/stdpar/himenoBMTxps.cpp
index 8a95e7d..c0c5dbb 100644
--- a/stdpar/himenoBMTxps.cpp
+++ b/stdpar/himenoBMTxps.cpp
@@ -23,7 +23,7 @@
  This program is to measure a computer performance in MFLOPS
  by using a kernel which appears in a linear solver of pressure
  Poisson eq. which appears in an incompressible Navier-Stokes solver.
- A point-Jacobi method is employed in this solver as this method can 
+ A point-Jacobi method is employed in this solver as this method can
  be easyly vectrized and be parallelized.
  ------------------
  Finite-difference method, curvilinear coodinate system
@@ -79,20 +79,20 @@
 #define MKMAX            1025
 #endif
 
-float jacobi(int nn, float (*a)[MIMAX][MJMAX][MKMAX], 
-                     float(*b)[MIMAX][MJMAX][MKMAX], 
-                     float (*c)[MIMAX][MJMAX][MKMAX], 
-                     float (*p)[MJMAX][MKMAX], 
-                     float (*bnd)[MJMAX][MKMAX], 
-                     float(*wrk1)[MJMAX][MKMAX], 
+float jacobi(int nn, float (*a)[MIMAX][MJMAX][MKMAX],
+                     float(*b)[MIMAX][MJMAX][MKMAX],
+                     float (*c)[MIMAX][MJMAX][MKMAX],
+                     float (*p)[MJMAX][MKMAX],
+                     float (*bnd)[MJMAX][MKMAX],
+                     float(*wrk1)[MJMAX][MKMAX],
                      float (*wrk2)[MJMAX][MKMAX]);
 
-void initmt(float (*a)[MIMAX][MJMAX][MKMAX], 
-            float(*b)[MIMAX][MJMAX][MKMAX], 
-            float (*c)[MIMAX][MJMAX][MKMAX], 
-            float (*p)[MJMAX][MKMAX], 
-            float (*bnd)[MJMAX][MKMAX], 
-            float(*wrk1)[MJMAX][MKMAX], 
+void initmt(float (*a)[MIMAX][MJMAX][MKMAX],
+            float(*b)[MIMAX][MJMAX][MKMAX],
+            float (*c)[MIMAX][MJMAX][MKMAX],
+            float (*p)[MJMAX][MKMAX],
+            float (*bnd)[MJMAX][MKMAX],
+            float(*wrk1)[MJMAX][MKMAX],
             float (*wrk2)[MJMAX][MKMAX]);
 
 double fflop(int,int,int);
@@ -104,7 +104,7 @@ double second();
 // NB: C++ <= 17 doesn't have this built-in, and it's only added later in ranges-v3 (C++2a) which this
 // implementation doesn't target
 template <typename N>
-class ranged 
+class ranged
 {
   N from, to;
 public:
@@ -119,9 +119,11 @@ public:
       using iterator_category = std::random_access_iterator_tag;
       explicit iterator(N _num = 0) : num(_num) {}
 
-      iterator& operator++() { num++; return *this; }
+      iterator& operator++() { ++num; return *this; }
+      iterator& operator--() { --num; return *this; }
       iterator operator++(int) { iterator retval = *this; ++(*this); return retval; }
       iterator operator+(const value_type v) const { return iterator(num + v); }
+      iterator& operator+=(const value_type v) { num += v; return *this; }
 
       bool operator==(iterator other) const { return num == other.num; }
       bool operator!=(iterator other) const { return *this != other; }
@@ -171,7 +173,7 @@ int main()
   cpu = cpu1 - cpu0;
 
   flop = fflop(MIMAX - 1,MJMAX - 1,MKMAX - 1);
-  
+
   printf(" MFLOPS: %f time(s): %f %e\n\n",
          mflops(nn,cpu,flop),cpu,gosa);
 
@@ -189,33 +191,33 @@ int main()
   cpu1 = second();
 
   cpu = cpu1 - cpu0;
-  
+
   printf(" Loop executed for %d times\n",nn);
   printf(" Gosa : %e \n",gosa);
   printf(" MFLOPS measured : %f\tcpu : %f\n",mflops(nn,cpu,flop),cpu);
   printf(" Score based on Pentium III 600MHz : %f\n",
          mflops(nn,cpu,flop)/82,84);
-  
+
   return (0);
 }
 
-void initmt(float (*a)[MIMAX][MJMAX][MKMAX], 
-            float(*b)[MIMAX][MJMAX][MKMAX], 
-            float (*c)[MIMAX][MJMAX][MKMAX], 
-            float (*p)[MJMAX][MKMAX], 
-            float (*bnd)[MJMAX][MKMAX], 
-            float(*wrk1)[MJMAX][MKMAX], 
+void initmt(float (*a)[MIMAX][MJMAX][MKMAX],
+            float(*b)[MIMAX][MJMAX][MKMAX],
+            float (*c)[MIMAX][MJMAX][MKMAX],
+            float (*p)[MJMAX][MKMAX],
+            float (*bnd)[MJMAX][MKMAX],
+            float(*wrk1)[MJMAX][MKMAX],
             float (*wrk2)[MJMAX][MKMAX])
 {
   ranged<int> range_m(0,(MIMAX) * (MJMAX) * (MKMAX));
 
-  std::for_each(PAR_UNSEQ range_m.begin(), range_m.end(), [=](int ijk) 
+  std::for_each(PAR_UNSEQ range_m.begin(), range_m.end(), [=](int ijk)
   {
     int i = ijk / ((MJMAX) * (MKMAX));
     int jk = ijk % ((MJMAX)*(MKMAX));
     int j = jk / (MKMAX);
     int k = jk % (MKMAX);
-    
+
       a[0][i][j][k]=0.0;
       a[1][i][j][k]=0.0;
       a[2][i][j][k]=0.0;
@@ -233,7 +235,7 @@ void initmt(float (*a)[MIMAX][MJMAX][MKMAX],
 
   ranged<int> range_n(0,(MIMAX - 1) * (MJMAX - 1) * (MKMAX - 1));
 
-  std::for_each(PAR_UNSEQ range_n.begin(), range_n.end(), [=](int ijk) 
+  std::for_each(PAR_UNSEQ range_n.begin(), range_n.end(), [=](int ijk)
   {
     int i = ijk / ((MJMAX - 1) * (MKMAX - 1));
     int jk = ijk % ((MJMAX - 1)*(MKMAX - 1));
@@ -256,12 +258,12 @@ void initmt(float (*a)[MIMAX][MJMAX][MKMAX],
   });
 }
 
-float jacobi(int nn, float (*a)[MIMAX][MJMAX][MKMAX], 
-                     float(*b)[MIMAX][MJMAX][MKMAX], 
-                     float (*c)[MIMAX][MJMAX][MKMAX], 
-                     float (*p)[MJMAX][MKMAX], 
-                     float (*bnd)[MJMAX][MKMAX], 
-                     float(*wrk1)[MJMAX][MKMAX], 
+float jacobi(int nn, float (*a)[MIMAX][MJMAX][MKMAX],
+                     float(*b)[MIMAX][MJMAX][MKMAX],
+                     float (*c)[MIMAX][MJMAX][MKMAX],
+                     float (*p)[MJMAX][MKMAX],
+                     float (*bnd)[MJMAX][MKMAX],
+                     float(*wrk1)[MJMAX][MKMAX],
                      float (*wrk2)[MJMAX][MKMAX])
 {
   float gosa;
@@ -272,7 +274,7 @@ float jacobi(int nn, float (*a)[MIMAX][MJMAX][MKMAX],
     gosa = 0.0;
 
     // REDUCTION
-    gosa = std::transform_reduce(PAR_UNSEQ range.begin(), range.end() , 0.0, std::plus{}, [=](int ijk) 
+    gosa = std::transform_reduce(PAR_UNSEQ range.begin(), range.end() , 0.0, std::plus{}, [=](int ijk)
     {
       int i = ijk / ((MJMAX - 1-2) * (MKMAX - 1-2)) + 1;
       int jk = ijk % ((MJMAX - 1-2)*(MKMAX - 1-2));
@@ -302,12 +304,12 @@ float jacobi(int nn, float (*a)[MIMAX][MJMAX][MKMAX],
       return ss*ss;
     });
 
-    std::for_each(PAR_UNSEQ range.begin(), range.end(), [=](int ijk) 
+    std::for_each(PAR_UNSEQ range.begin(), range.end(), [=](int ijk)
     {
       int i = ijk / ((MJMAX - 1-2) * (MKMAX - 1-2)) + 1;
       int jk = ijk % ((MJMAX - 1-2)*(MKMAX - 1-2));
       int j = jk / (MKMAX - 1-2) + 1;
-      int k = jk % (MKMAX - 1-2) + 1;                  
+      int k = jk % (MKMAX - 1-2) + 1;
       p[i][j][k] = wrk2[i][j][k];
     });
   } /* end n loop */
@@ -331,7 +333,7 @@ double second()
   static std::chrono::high_resolution_clock::time_point t1;
   static std::chrono::high_resolution_clock::time_point t2;
   double t = 0.0;
-  
+
   if (!started)
   {
     started = true;
@@ -346,4 +348,9 @@ double second()
 // nvc++ -O3 -std=c++17 -stdpar=gpu -DLARGE himenoBMTxps.cpp -o himenoBMTxps && ./himenoBMTxps
 // nvc++ -O3 -std=c++17 -stdpar=gpu -DMIDDLE himenoBMTxps.cpp -o himenoBMTxps && ./himenoBMTxps
 // nvc++ -O3 -std=c++17 -stdpar=gpu -DSMALL himenoBMTxps.cpp -o himenoBMTxps && ./himenoBMTxps
+// OR
+// clang++ -O3 -std=c++17 -stdpar --stdpar-path=PATH_TO_FORWARDING_HEADER_ROOT --offload-arch=YOUR_TARGET -DLARGE himenoBMTxps.cpp -o himenoBMTxps && ./himenoBMTxps
+// clang++ -O3 -std=c++17 -stdpar --stdpar-path=PATH_TO_FORWARDING_HEADER_ROOT --offload-arch=YOUR_TARGET -DMIDDLE himenoBMTxps.cpp -o himenoBMTxps && ./himenoBMTxps
+// clang++ -O3 -std=c++17 -stdpar --stdpar-path=PATH_TO_FORWARDING_HEADER_ROOT --offload-arch=YOUR_TARGET -DSMALL himenoBMTxps.cpp -o himenoBMTxps && ./himenoBMTxps
+
 
