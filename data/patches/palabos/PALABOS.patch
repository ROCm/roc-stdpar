diff --git a/build/.gitignore b/build/.gitignore
deleted file mode 100644
index 86d0cb2..0000000
--- a/build/.gitignore
+++ /dev/null
@@ -1,4 +0,0 @@
-# Ignore everything in this directory
-*
-# Except this file
-!.gitignore
\ No newline at end of file
diff --git a/examples/80days/rayleighTaylor3D/CMakeLists.txt b/examples/80days/rayleighTaylor3D/CMakeLists.txt
index d304893..0bfbfc6 100644
--- a/examples/80days/rayleighTaylor3D/CMakeLists.txt
+++ b/examples/80days/rayleighTaylor3D/CMakeLists.txt
@@ -49,6 +49,13 @@ if(${CMAKE_CXX_COMPILER_ID} STREQUAL GNU)
 elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL Clang)
     message("Clang.")
     set(CMAKE_CXX_FLAGS "-std=c++17 -fopenmp -Wall -Wnon-virtual-dtor")
+    if (DEFINED CLANG_STDPAR)
+        string(APPEND CMAKE_CXX_FLAGS " -stdpar --stdpar-path=${STDPAR_PATH} --offload-arch=${STDPAR_TARGET}")
+        if (NOT STDPAR_TARGET MATCHES "^gfx9")
+            string(APPEND CMAKE_CXX_FLAGS " --stdpar-interpose-alloc")
+        endif ()
+        set(CMAKE_EXE_LINKER_FLAGS -stdpar)
+    endif ()
     set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")
     set(CMAKE_CXX_FLAGS_DEBUG "-g -DPLB_DEBUG -O1")
 elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL PGI) # nvc++ is based on the PGI compiler
diff --git a/examples/80days/sandstone/CMakeLists.txt b/examples/80days/sandstone/CMakeLists.txt
index 823b3b7..18ada76 100644
--- a/examples/80days/sandstone/CMakeLists.txt
+++ b/examples/80days/sandstone/CMakeLists.txt
@@ -49,6 +49,13 @@ if(${CMAKE_CXX_COMPILER_ID} STREQUAL GNU)
 elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL Clang)
     message("Clang.")
     set(CMAKE_CXX_FLAGS "-std=c++17 -fopenmp -Wall -Wnon-virtual-dtor")
+    if (DEFINED CLANG_STDPAR)
+        string(APPEND CMAKE_CXX_FLAGS " -stdpar --stdpar-path=${STDPAR_PATH} --offload-arch=${STDPAR_TARGET}")
+        if (NOT STDPAR_TARGET MATCHES "^gfx9")
+            string(APPEND CMAKE_CXX_FLAGS " --stdpar-interpose-alloc")
+        endif ()
+        set(CMAKE_EXE_LINKER_FLAGS -stdpar)
+    endif ()
     set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")
     set(CMAKE_CXX_FLAGS_DEBUG "-g -DPLB_DEBUG -O1")
 elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL PGI) # nvc++ is based on the PGI compiler
diff --git a/examples/80days/tgv3d/CMakeLists.txt b/examples/80days/tgv3d/CMakeLists.txt
index d37e5ed..7075617 100644
--- a/examples/80days/tgv3d/CMakeLists.txt
+++ b/examples/80days/tgv3d/CMakeLists.txt
@@ -49,6 +49,13 @@ if(${CMAKE_CXX_COMPILER_ID} STREQUAL GNU)
 elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL Clang)
     message("Clang.")
     set(CMAKE_CXX_FLAGS "-std=c++17 -fopenmp -Wall -Wnon-virtual-dtor")
+    if (DEFINED CLANG_STDPAR)
+        string(APPEND CMAKE_CXX_FLAGS " -stdpar --stdpar-path=${STDPAR_PATH} --offload-arch=${STDPAR_TARGET}")
+        if (NOT STDPAR_TARGET MATCHES "^gfx9")
+            string(APPEND CMAKE_CXX_FLAGS " --stdpar-interpose-alloc")
+        endif ()
+        set(CMAKE_EXE_LINKER_FLAGS -stdpar)
+    endif ()
     set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG")
     set(CMAKE_CXX_FLAGS_DEBUG "-g -DPLB_DEBUG -O1")
 elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL PGI) # nvc++ is based on the PGI compiler
diff --git a/src/acceleratedLattice/acceleratedCollisions.h b/src/acceleratedLattice/acceleratedCollisions.h
index 0a553c6..0c227b6 100644
--- a/src/acceleratedLattice/acceleratedCollisions.h
+++ b/src/acceleratedLattice/acceleratedCollisions.h
@@ -5,7 +5,7 @@
  * own the IP rights for most of the code base. Since October 2019, the
  * Palabos project is maintained by the University of Geneva and accepts
  * source code contributions from the community.
- * 
+ *
  * Contact:
  * Jonas Latt
  * Computer Science Department
@@ -14,7 +14,7 @@
  * 1227 Carouge, Switzerland
  * jonas.latt@unige.ch
  *
- * The most recent release of Palabos can be downloaded at 
+ * The most recent release of Palabos can be downloaded at
  * <https://palabos.unige.ch/>
  *
  * The library Palabos is free software: you can redistribute it and/or
@@ -83,7 +83,7 @@ int toCollisionModel(Dynamics<T, Descriptor> const& dynamics) {
 // an alternative, you can call the "static switch" version below using variadic
 // templates, in which the needed collision models are enumerated explicitly.
 template<typename T, template<typename U> class Descriptor>
-void collide(int collisionModel, Array<T, Descriptor<T>::numPop>& f, 
+void collide(int collisionModel, Array<T, Descriptor<T>::numPop>& f,
              Array<T, Descriptor<T>::ExternalField::numScalars>& ext,
              Array<T, GPUconst<T,Descriptor>::maxStaticScalars> staticScalars, T* dynamicScalars, plint index)
 {
@@ -160,15 +160,17 @@ template<int ...> struct IntList {};
 template<typename T, template<typename U> class Descriptor>
 struct StaticSwitch
 {
-    static void static_switch(IntList<>, int collisionModel, Array<T, Descriptor<T>::numPop>& f, 
+    static void static_switch(IntList<>, int collisionModel, Array<T, Descriptor<T>::numPop>& f,
                              Array<T, Descriptor<T>::ExternalField::numScalars>& ext, Array<T, GPUconst<T,Descriptor>::maxStaticScalars> staticScalars,
                              T* dynamicScalars, plint index)
     {
-        printf("Collision model not implemented: %d\n", collisionModel);
+        #if !defined(__STDPAR__) // Temporary workaround
+            printf("Collision model not implemented: %d\n", collisionModel);
+        #endif
     }
 
     template<int MODEL, int ...N>
-    static void static_switch(IntList<MODEL, N...>, int collisionModel, Array<T, Descriptor<T>::numPop>& f, 
+    static void static_switch(IntList<MODEL, N...>, int collisionModel, Array<T, Descriptor<T>::numPop>& f,
                              Array<T, Descriptor<T>::ExternalField::numScalars>& ext, Array<T, GPUconst<T,Descriptor>::maxStaticScalars> staticScalars,
                              T* dynamicScalars, plint index)
     {
@@ -181,7 +183,7 @@ struct StaticSwitch
     }
 
     template<int MODEL>
-    static void static_switch(IntList<MODEL>, int collisionModel, Array<T, Descriptor<T>::numPop>& f, 
+    static void static_switch(IntList<MODEL>, int collisionModel, Array<T, Descriptor<T>::numPop>& f,
                              Array<T, Descriptor<T>::ExternalField::numScalars>& ext, Array<T, GPUconst<T,Descriptor>::maxStaticScalars> staticScalars,
                              T* dynamicScalars, plint index)
     {
@@ -190,12 +192,14 @@ struct StaticSwitch
             Collision<T, Descriptor, MODEL>::collide(f, ext, staticScalars, dynamicScalars, index);
         }
         else {
-            printf("Collision model not implemented: %d\n", collisionModel);
+            #if !defined(__STDPAR__) // Temporary workaround.
+                printf("Collision model not implemented: %d\n", collisionModel);
+            #endif
         }
     }
 
     template<int ...N>
-    static void static_switch(int collisionModel, Array<T, Descriptor<T>::numPop>& f, 
+    static void static_switch(int collisionModel, Array<T, Descriptor<T>::numPop>& f,
                              Array<T, Descriptor<T>::ExternalField::numScalars>& ext, Array<T, GPUconst<T,Descriptor>::maxStaticScalars> staticScalars,
                              T* dynamicScalars, plint index)
     {
@@ -207,7 +211,7 @@ struct StaticSwitch
 
 template<typename T, template<typename U> class Descriptor, int ...N>
 struct CollisionKernel {
-    void operator()(int collisionModel, Array<T, Descriptor<T>::numPop>& f, 
+    void operator()(int collisionModel, Array<T, Descriptor<T>::numPop>& f,
                     Array<T, Descriptor<T>::ExternalField::numScalars>& ext, Array<T, GPUconst<T,Descriptor>::maxStaticScalars> staticScalars, T* dynamicScalars, plint index) const
     {
         StaticSwitch<T,Descriptor>::template static_switch<N...>
