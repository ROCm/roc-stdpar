diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5cb9198..91fee0f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -157,7 +157,7 @@ endif()
 add_subdirectory( extern/googlebenchmark )
 
 set( TRACCC_STDPAR_BACKEND "gpu" CACHE STRING
-"Define the backend to use for C++ Parallel Algorithms (gpu|multicore|none)")
+"Define the backend to use for C++ Parallel Algorithms (gpu|multicore|clang|none)")
 # Setup the flag for stdpar compilation based on selected backend
 if(${TRACCC_STDPAR_BACKEND} MATCHES "gpu")
   set( TRACCC_STDPAR_BACKEND_FLAG "-stdpar=gpu")
@@ -165,8 +165,12 @@ elseif(${TRACCC_STDPAR_BACKEND} MATCHES "multicore")
   set( TRACCC_STDPAR_BACKEND_FLAG "-stdpar=multicore")
 elseif(${TRACCC_STDPAR_BACKEND} MATCHES "none")
   set( TRACCC_STDPAR_BACKEND_FLAG "-nostdpar")
+elseif(${TRACCC_STDPAR_BACKEND} MATCHES "clang")
+  if (DEFINED TRACCC_STDPAR_PATH)
+   set( TRACCC_STDPAR_BACKEND_FLAG "-stdpar")
+  endif ()
 else()
-  message(FATAL_ERROR "The backend for C++ Parallel Algorithms is unkown. Choose one of the following values: gpu|multicore|none")
+  message(FATAL_ERROR "The backend for C++ Parallel Algorithms is unkown. Choose one of the following values: gpu|multicore|clang|none")
 endif()
 
 # option for algebra plugins (ARRAY EIGEN SMATRIX VC VECMEM)
diff --git a/benchmarks/stdpar/CMakeLists.txt b/benchmarks/stdpar/CMakeLists.txt
index c82238b..4164b85 100644
--- a/benchmarks/stdpar/CMakeLists.txt
+++ b/benchmarks/stdpar/CMakeLists.txt
@@ -2,8 +2,10 @@ cmake_minimum_required(VERSION 3.14)
 
 enable_testing()
 
-find_package(CUDA REQUIRED)
-enable_language(CUDA)
+if (TRACCC_STDPAR_BACKEND MATCHES "gpu")
+    find_package(CUDA REQUIRED)
+    enable_language(CUDA)
+endif ()
 
 traccc_add_executable( benchmark_stdpar_cca "stdpar_cca.cpp"
     LINK_LIBRARIES traccc::core traccc::io traccc_benchmarks_common
@@ -11,4 +13,15 @@ traccc_add_executable( benchmark_stdpar_cca "stdpar_cca.cpp"
 
 set (LIB "traccc_benchmark_stdpar_cca")
 target_compile_options(${LIB} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
-target_link_options(${LIB} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+if (TRACCC_STDPAR_BACKEND MATCHES "clang")
+    if (DEFINED TRACCC_STDPAR_BACKEND_FLAG)
+        target_compile_options( ${LIB} PRIVATE
+            ${TRACCC_STDPAR_BACKEND_FLAG}
+            --stdpar-path=${TRACCC_STDPAR_PATH}
+            --offload-arch=${TRACCC_STDPAR_TARGET})
+        target_link_options( ${LIB} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+    else ()
+        target_compile_options(${LIB} PRIVATE -march=native -fopenmp-simd)
+    endif ()
+    target_link_libraries(${LIB} PRIVATE tbb)
+endif ()
\ No newline at end of file
diff --git a/device/stdpar/CMakeLists.txt b/device/stdpar/CMakeLists.txt
index 5e2a15f..8d7fcd0 100644
--- a/device/stdpar/CMakeLists.txt
+++ b/device/stdpar/CMakeLists.txt
@@ -32,5 +32,18 @@ traccc_add_library( ${LIB} stdpar TYPE SHARED
 target_link_libraries( ${LIB}
   PUBLIC traccc::core)
 
-target_compile_options(${LIB} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
-target_link_options(${LIB} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+if (TRACCC_STDPAR_BACKEND MATCHES "clang")
+  if (DEFINED TRACCC_STDPAR_BACKEND_FLAG)
+    target_compile_options( ${LIB} PRIVATE
+        ${TRACCC_STDPAR_BACKEND_FLAG}
+        --stdpar-path=${TRACCC_STDPAR_PATH}
+        --offload-arch=${TRACCC_STDPAR_TARGET})
+    target_link_options( ${LIB} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+  else ()
+    target_compile_options(${LIB} PRIVATE -march=native -fopenmp-simd)
+  endif ()
+  target_link_libraries(${LIB} PRIVATE tbb)
+else ()
+  target_compile_options(${LIB} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+  target_link_options(${LIB} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+endif ()
diff --git a/device/stdpar/include/traccc/stdpar/clusterization/clusterization_algorithm.hpp b/device/stdpar/include/traccc/stdpar/clusterization/clusterization_algorithm.hpp
index 18e9ccd..fe33981 100644
--- a/device/stdpar/include/traccc/stdpar/clusterization/clusterization_algorithm.hpp
+++ b/device/stdpar/include/traccc/stdpar/clusterization/clusterization_algorithm.hpp
@@ -95,6 +95,7 @@ class clusterization_algorithm
         /*
          * Execute the CCA algorithm
          */
+        // TODO: this is currently broken with Clang Standard Parallel Algorithm Offload; investigate.
         std::for_each_n(std::execution::par, counting_iterator(0), nbr_of_modules, [=](unsigned int i){
           unsigned int num_clusters = 0;
 
diff --git a/device/stdpar/include/traccc/stdpar/clusterization/measurement_creation.hpp b/device/stdpar/include/traccc/stdpar/clusterization/measurement_creation.hpp
index d0fd81c..d90fc27 100644
--- a/device/stdpar/include/traccc/stdpar/clusterization/measurement_creation.hpp
+++ b/device/stdpar/include/traccc/stdpar/clusterization/measurement_creation.hpp
@@ -27,8 +27,8 @@ inline scalar signal_cell_modelling(scalar signal_in,
 /// Function for pixel segmentation
 inline vector2 position_from_cell(cell c, cell_module cl_id) {
     // Retrieve the specific values based on module idx
-    return {c.channel0,
-            c.channel1};
+    return {(float)c.channel0,
+            (float)c.channel1};
 }
 
 inline vector2 get_pitch(cell_module module) {
diff --git a/device/stdpar/src/clusterization/component_connection_fastsv.cpp b/device/stdpar/src/clusterization/component_connection_fastsv.cpp
index c5214d8..382b73a 100644
--- a/device/stdpar/src/clusterization/component_connection_fastsv.cpp
+++ b/device/stdpar/src/clusterization/component_connection_fastsv.cpp
@@ -152,8 +152,9 @@ inline bool is_adjacent(channel_id ac0, channel_id ac1, channel_id bc0,
     return p0 * p0 <= 1 && p1 * p1 <= 1;
 }
 
+template<typename T>
 inline void reduce_problem_cell(const cell_container& cells, index_t tid,
-                                unsigned char *adjc, auto adjv) {
+                                unsigned char *adjc, T adjv) {
                                 // Using auto for adjv because other definitions did not work.
                                 // Open for suggestions to improve this.
   /*
@@ -218,8 +219,9 @@ inline void reduce_problem_cell(const cell_container& cells, index_t tid,
  * The implementation corresponds to Algorithm 1 of the following paper:
  * https://epubs.siam.org/doi/pdf/10.1137/1.9781611976137.5
  */
+template<typename T>
 void fast_sv_1(index_t* f, index_t* gf, unsigned char *adjc,
-                          auto adjv, unsigned int size) {
+                          T adjv, unsigned int size) {
   /*
    * The algorithm finishes if an iteration leaves the arrays unchanged.
    * This varible will be set if a change is made, and dictates if another
@@ -571,7 +573,7 @@ void fast_sv_kernel(
   /*
    * Start running the work in different kernels using std par.
    */
-  std::for_each_n(std::execution::par, counting_iterator(0), partitions->size(), // TODO: should be std::execution::par
+  std::for_each_n(std::execution::par_unseq, counting_iterator(0), partitions->size(), // TODO: should be std::execution::par
     [=](unsigned int i){
     /*
      * Seek the correct cell region in the input data. Again, this is all a
diff --git a/examples/run/stdpar/CMakeLists.txt b/examples/run/stdpar/CMakeLists.txt
index dde5fa3..99c31df 100644
--- a/examples/run/stdpar/CMakeLists.txt
+++ b/examples/run/stdpar/CMakeLists.txt
@@ -12,13 +12,39 @@ traccc_add_executable( stdpar_sparseccl_example "stdpar_sparseccl.cpp"
    traccc::options traccc::stdpar Boost::program_options)
 
 set (EXE_NAME "traccc_stdpar_sparseccl_example")
-target_compile_options(${EXE_NAME} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
-target_link_options(${EXE_NAME} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+if (TRACCC_STDPAR_BACKEND MATCHES "clang")
+  if (DEFINED TRACCC_STDPAR_BACKEND_FLAG)
+    target_compile_options( ${EXE_NAME} PRIVATE
+        ${TRACCC_STDPAR_BACKEND_FLAG}
+        --stdpar-path=${TRACCC_STDPAR_PATH}
+        --offload-arch=${TRACCC_STDPAR_TARGET})
+    target_link_options( ${EXE_NAME} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+  else ()
+    target_compile_options(${EXE_NAME} PRIVATE -march=native -fopenmp-simd)
+  endif ()
+  target_link_libraries(${EXE_NAME} PRIVATE tbb)
+else ()
+  target_compile_options(${EXE_NAME} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+  target_link_options(${EXE_NAME} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+endif ()
 
 traccc_add_executable( stdpar_fastsv_example "stdpar_fastsv.cpp"
    LINK_LIBRARIES vecmem::core traccc::core traccc::io
    traccc::options traccc::stdpar Boost::program_options)
 
 set (EXE_NAME2 "traccc_stdpar_fastsv_example")
-target_compile_options(${EXE_NAME2} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
-target_link_options(${EXE_NAME2} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+if (TRACCC_STDPAR_BACKEND MATCHES "clang")
+  if (DEFINED TRACCC_STDPAR_BACKEND_FLAG)
+    target_compile_options( ${EXE_NAME2} PRIVATE
+        ${TRACCC_STDPAR_BACKEND_FLAG}
+        --stdpar-path=${TRACCC_STDPAR_PATH}
+        --offload-arch=${TRACCC_STDPAR_TARGET})
+    target_link_options( ${EXE_NAME2} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+  else ()
+    target_compile_options(${EXE_NAME2} PRIVATE -march=native -fopenmp-simd)
+  endif ()
+  target_link_libraries(${EXE_NAME2} PRIVATE tbb)
+else ()
+  target_compile_options(${EXE_NAME2} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+  target_link_options(${EXE_NAME2} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+endif ()
diff --git a/tests/stdpar/CMakeLists.txt b/tests/stdpar/CMakeLists.txt
index 166852c..164c74e 100644
--- a/tests/stdpar/CMakeLists.txt
+++ b/tests/stdpar/CMakeLists.txt
@@ -14,10 +14,35 @@ traccc_add_test( stdpar_sparseccl "test_cca_sparseccl.cpp"
                   traccc::core traccc::io traccc::stdpar)
 
 set (LIB "traccc_test_stdpar_fastsv")
-target_compile_options(${LIB} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
-target_link_options(${LIB} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+if (TRACCC_STDPAR_BACKEND MATCHES "clang")
+  if (DEFINED TRACCC_STDPAR_BACKEND_FLAG)
+    target_compile_options( ${LIB} PRIVATE
+        ${TRACCC_STDPAR_BACKEND_FLAG}
+        --stdpar-path=${TRACCC_STDPAR_PATH}
+        --offload-arch=${TRACCC_STDPAR_TARGET})
+    target_link_options( ${LIB} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+  else ()
+    target_compile_options(${LIB} PRIVATE -march=native -fopenmp-simd)
+  endif ()
+  target_link_libraries(${LIB} PRIVATE tbb)
+else ()
+  target_compile_options(${LIB} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+  target_link_options(${LIB} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+endif ()
 
 set (LIB2 "traccc_test_stdpar_sparseccl")
-target_compile_options(${LIB2} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
-target_link_options(${LIB2} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
-                  
\ No newline at end of file
+if (TRACCC_STDPAR_BACKEND MATCHES "clang")
+  if (DEFINED TRACCC_STDPAR_BACKEND_FLAG)
+    target_compile_options( ${LIB2} PRIVATE
+        ${TRACCC_STDPAR_BACKEND_FLAG}
+        --stdpar-path=${TRACCC_STDPAR_PATH}
+        --offload-arch=${TRACCC_STDPAR_TARGET})
+    target_link_options( ${LIB2} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+  else ()
+    target_compile_options(${LIB2} PRIVATE -march=native -fopenmp-simd)
+  endif ()
+  target_link_libraries(${LIB2} PRIVATE tbb)
+else ()
+  target_compile_options(${LIB2} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+  target_link_options(${LIB2} PRIVATE ${TRACCC_STDPAR_BACKEND_FLAG})
+endif ()
