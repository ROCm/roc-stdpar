diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..82854ba
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,42 @@
+cmake_minimum_required(VERSION 3.14)
+
+project(nbody-stdpar LANGUAGES CXX)
+
+set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+set(CMAKE_CXX_EXTENSIONS OFF)
+
+find_package(TBB REQUIRED)
+
+if (USE_OFFLOAD)
+    if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+        set(
+            CXX_FLAGS
+                -stdpar
+                --stdpar-path=${STDPAR_PATH}
+                --offload-arch=${STDPAR_TARGET}
+                -march=native)
+        if (NOT STDPAR_TARGET MATCHES "^gfx9")
+            list(APPEND CXX_FLAGS --stdpar-interpose-alloc)
+        endif ()
+        set(LD_FLAGS -stdpar)
+        set(LD_LIBS TBB::tbb)
+    elseif (CMAKE_CXX_COMPILER_ID MATCHES "NVHPC")
+        set(CXX_FLAGS
+                -stdpar
+                -gpu=${STDPAR_TARGET}
+                --restrict
+                -Mllvm-fast
+                -Ktrap=none
+                -Minfo=accel
+                -Minfo=stdpar)
+    endif ()
+else ()
+    set(CXX_FLAGS -march=native -fopenmp-simd)
+    set(LD_LIBRARIES TBB::tbb)
+endif ()
+
+add_executable(${PROJECT_NAME} main.cc)
+target_compile_options(${PROJECT_NAME} PRIVATE ${CXX_FLAGS})
+target_link_options(${PROJECT_NAME} PRIVATE ${LD_FLAGS})
+target_link_libraries(${PROJECT_NAME} PRIVATE ${LD_LIBRARIES})
diff --git a/physics_impl.hh b/physics_impl.hh
index 858e619..473aec1 100644
--- a/physics_impl.hh
+++ b/physics_impl.hh
@@ -16,7 +16,7 @@
 template <typename vecT>
 void accumulate_forces(System<vecT> &system, std::vector<vecT> &accel) {
   using T = typename vecT::value_type;
-  const int sys_size{system.sysPos.size()};
+  const int sys_size = system.sysPos.size();
 
   T const *mssptr = system.sysMss.data();
   vecT const *posptr = system.sysPos.data();
@@ -41,7 +41,7 @@ vecT acceleration(const vecT &pos1, const vecT &pos2, const T mass2) {
   vecT rel_dist = pos2 - pos1; // relative distance
   T rd_sq{0.00001};            // rel_dist^2, initialize with softening length
   rd_sq += dot_product(rel_dist);
-  const T rd_mag = rsqrtf(rd_sq); // 1 / (rel_dist dot rel_dist)^(1/2)
+  const T rd_mag = T{1} / sqrtf(rd_sq); // 1 / (rel_dist dot rel_dist)^(1/2)
   const T impulse = mass2 * rd_mag * rd_mag * rd_mag; // m_j / |rel_dist|^3
   rel_dist *= impulse;                                // acceleration vector
   return rel_dist;
